type AddressPayload = record { address : text };
type Coffee = record {
  id : text;
  name : text;
  message : text;
  timestamp : nat64;
};
type CoffeePayload = record { name : text; message : text; amount : nat64 };
type ManualReply = variant { Ok : bool; Err : text };
type ManualReply_1 = variant { Ok : text; Err : text };
type ManualReply_2 = variant { Ok : nat64; Err : text };
type _AzleResult = variant { Ok : Coffee; Err : text };
type _AzleResult_1 = variant { Ok : vec Coffee; Err : text };
type initPayload = record { network : int8 };
service : () -> {
  deleteCoffee : (text) -> (_AzleResult);
  getAddressFromPrincipal : (principal) -> (text) query;
  getCoffee : (text) -> (_AzleResult) query;
  getCoffees : () -> (_AzleResult_1) query;
  getFaucetTokens : () -> (ManualReply);
  initialize : (initPayload) -> (ManualReply_1);
  sendCoffee : (CoffeePayload) -> (_AzleResult);
  walletBalanceLocal : (AddressPayload) -> (ManualReply_2);
  withdrawFunds : (text, nat64) -> (ManualReply_1);
}